{"version":3,"sources":["components/Message.js","components/StartInput.js","components/ToggleControl.js","components/SpeedControl.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","className","timer","Math","abs","initialValue","displayMessage","StartInput","onSubmit","type","onChange","e","value","target","isNaN","parseInt","toString","slice","name","id","placeholder","ToggleControl","isRunning","disableButton","disabled","onClick","togglePauseResume","SpeedControl","selectedSpeed","speedChange","App","tick","state","newTime","setState","minutes","floor","seconds","togglePauseResumeDisabled","clearInterval","timerId","formatTime","preventDefault","startTime","minutesToSeconds","speed","setInterval","onTogglePauseResume","getTimerStyle","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4355e3b5.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Message(props) {\n    //Method for displaying the message based on the props timer value\n    const displayMessage = () => {\n        if(props.timer <= Math.abs(props.initialValue / 2) && props.initialValue !== null) {\n            if(props.timer <= 10) {\n                if(props.timer === 0) {\n                    return \"Time's Up!\"\n                } \n            }\n            return \"More than halfway there!\"\n        }\n        return \n    }\n    return(\n        <div className=\"message\"><h2 className=\"message\">{displayMessage()}</h2></div>\n    )\n}\n\nexport default Message","import React from 'react';\n\nfunction StartInput(props) {\n\n\n    const isInt = (value) => {\n        return !isNaN(value) && parseInt(value).toString() === value \n              // && !isNaN(parseInt(value, 10));\n    }\n    const onChange = (e) => {\n\n        //Determine if input is an integer\n        if(isInt(e.target.value)){\n            e.target.value = e.target.value.slice(0,2)\n        } else {\n            if(!isNaN(parseInt(e.target.value)))\n            e.target.value = parseInt(e.target.value).toString().slice(0,2)\n            else\n            e.target.value = null\n        }\n            \n\n\n        //e.target.value = formatInput(e.target.value);\n        // let input = e.target.value;\n        // input = input.replace(\":\",\"\");\n\n        // //Max character input is 4\n        // if(input.length >= 0) {\n        //     console.log(input)\n        //     //format input for display as mm:ss\n        //     if(input.length > 2)\n        //         e.target.value = input.slice(0,2) + \":\" + input.slice(2,4);\n        //     else\n        //         e.target.value = input\n\n        //     if(Number(e.target.value)) {\n        //         console.log(\"yesinteger\")\n        //     } else {  \n        //         console.log(\"no!!!!integet\")\n        //     }\n        // } else {\n        //     //display only 4 characters and format it to mm:ss\n        //     //e.target.value = e.target.value.slice(0,2) + \":\" + e.target.value.slice(2)\n        // }\n        \n\n    }\n    return(\n        <div className=\"input-form\">\n            <form onSubmit={props.onSubmit}>\n                <input className=\"input-box\" type=\"text\" onChange={onChange} name=\"startTime\" id=\"startTime\" placeholder=\"(Min)\"/>\n                <button className=\"submit-button\">Start</button>\n            </form>\n        </div>\n            )\n}\n\nexport default StartInput","import React from 'react';\n\nfunction ToggleControl(props) {\n    return(\n        <div className=\"pause\">\n            <button className={props.isRunning || props.disableButton ? \"pause-button\" : \"resume-button\"} disabled={props.disableButton} onClick={props.togglePauseResume}>{props.isRunning  || props.disableButton ?  \"Pause\" :   \"Resume\" }</button>\n        </div>\n    )\n}\n\nexport default ToggleControl","import React from 'react'\n\nfunction SpeedControl(props) {\n    return(\n        <div className=\"speed\">\n            <button disabled={ props.disableButton} className={props.selectedSpeed == 1000 ? \"selected speed-button\" : \"speed-button\"} onClick={props.speedChange} value=\"1000\">1x</button>\n            <button disabled={ props.disableButton} className={props.selectedSpeed == 666 ? \"selected speed-button\" : \"speed-button\"} onClick={props.speedChange} value=\"666\">1.5x</button>\n            <button disabled={ props.disableButton} className={props.selectedSpeed == 500 ? \"selected speed-button\" : \"speed-button\"}onClick={props.speedChange} value=\"500\">2x</button>\n        </div>\n    )\n}\n\nexport default SpeedControl","import React from 'react';\nimport Message from './components/Message'\nimport StartInput from './components/StartInput'\nimport ToggleControl from './components/ToggleControl'\nimport SpeedControl from './components/SpeedControl'\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: 0,\n      minutes: 0,\n      seconds: 0,\n      initialValue: null,\n      isRunning: false,\n      togglePauseResumeDisabled: true,\n      speed: 1000\n    }\n  }\n\n  tick = () => {\n    //Check the timer if it has not reach 0 and if it is currently running\n    if(this.state.timer > 0 && this.state.isRunning) {\n\n      //Decrement the timer by 1 second and save new timer to the state\n      let newTime = this.state.timer - 1;\n      this.setState({\n        timer: newTime,\n        minutes: Math.floor(newTime / 60),\n        seconds: newTime % 60,\n\n      });\n\n      //Disable Pause button if timer reaches 0\n      if(this.state.timer === 0)\n      this.setState({\n        togglePauseResumeDisabled: true,\n      });\n    } else {\n\n      //if timer reaches 0, pause the timer\n      if(this.state.timer === 0) {\n        clearInterval(this.timerId);\n        this.setState({\n          isRunning: false,\n        });\n      }\n    }\n    \n  }\n\n  // Method for formatting the timer for display\n  formatTime = (minutes, seconds) => {\n    if(minutes< 10)\n      minutes = \"0\" + minutes\n    if(seconds< 10)\n      seconds = \"0\" + seconds\n    return (<span>{minutes}:{seconds}</span>);\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    //Dont do anything is input is blank or zero\n    if(e.target.startTime.value === \"\" || e.target.startTime.value === \"0\")\n      return\n\n    //Clear interval if timer is currently running\n    if(this.state.isRunning) {\n      clearInterval(this.timerId);\n    }\n\n    //Get initial value from the form submitted and convert it to seconds\n    const minutesToSeconds = parseInt(e.target.startTime.value) * 60;\n\n    //Save initial value to state\n    this.setState({\n        timer: minutesToSeconds,\n        minutes: Math.floor(minutesToSeconds/60),\n        seconds: minutesToSeconds % 60,\n        initialValue: minutesToSeconds,\n        isRunning: true,\n        togglePauseResumeDisabled: false,\n        speed: 1000\n\n      });\n\n    //Start the timer with initial speed 1000ms\n    this.timerId = setInterval(\n      () => this.tick(), 1000\n    )\n  }\n\n  onTogglePauseResume = () => {\n    let isRunning = this.state.isRunning;\n    //Check if timer is running\n    if(isRunning){\n      //Pause the timer\n      clearInterval(this.timerId);\n    } else {\n      //Resume the timer\n      this.timerId = setInterval(\n        () => this.tick(), this.state.speed\n      )\n    }\n    \n    //Toggle isRunning state\n    this.setState({\n      isRunning: !isRunning\n    });\n  \n    \n  }\n\n  speedChange = (e) => {\n    //Pause the timer before changing the speed\n    clearInterval(this.timerId);\n\n    //Save new speed to state\n    this.setState({\n      speed: e.target.value\n    })\n\n    //Check if the timer is running\n    if(this.state.isRunning) {\n      //If timer running when speed is changed, continue the timer\n      this.timerId = setInterval(\n        () => this.tick(), e.target.value\n      )\n    } \n\n  }\n\n  getTimerStyle = () => {\n    if(this.state.timer <= 20 && this.state.initialValue != null) {\n      if(this.state.timer <= 10 && this.state.initialValue != null )\n        return \"warning blink\"\n      return \"warning\"\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <StartInput onSubmit={this.onSubmit} />\n        <Message initialValue={this.state.initialValue} timer={this.state.timer} />\n        <div className=\"timer\">\n          <h1 className={this.getTimerStyle()}>{this.formatTime(this.state.minutes, this.state.seconds)}</h1>\n        </div>\n        <ToggleControl disableButton={this.state.togglePauseResumeDisabled} isRunning={this.state.isRunning} togglePauseResume={this.onTogglePauseResume} />\n        <SpeedControl disableButton={!this.state.isRunning} selectedSpeed={this.state.speed} speedChange={this.speedChange}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}