{"version":3,"sources":["components/Message.js","components/StartInput.js","components/ToggleControl.js","components/SpeedControl.js","App.js","index.js"],"names":["Message","props","className","timer","Math","abs","initialValue","displayMessage","StartInput","onSubmit","type","onChange","e","value","target","isNaN","parseInt","toString","slice","name","id","placeholder","ToggleControl","isRunning","disableButton","disabled","onClick","togglePauseResume","SpeedControl","selectedSpeed","speedChange","App","tick","state","newTime","setState","minutes","floor","seconds","togglePauseResumeDisabled","clearInterval","timerId","formatTime","preventDefault","startTime","minutesToSeconds","speed","setInterval","onTogglePauseResume","getTimerStyle","this","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.507749da.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * @description    Component for displaying the message based on the timer value. \n * @param {Object.Number} props.timer contains the current timer value\n */\nfunction Message(props) {\n    const displayMessage = () => {\n        const messageOnHalfway = \"More than halfway there!\";\n        const messageOnTimesUp = \"Time's Up!\";\n        \n        if(props.timer <= Math.abs(props.initialValue / 2) && props.initialValue !== null) {\n            if(props.timer === 0) {\n                return messageOnTimesUp\n            } \n            return messageOnHalfway\n        } \n    }\n    return(\n        <div className=\"message\"><h2 className=\"message\">{displayMessage()}</h2></div>\n    )\n}\nexport default Message","import React from 'react';\n/**\n * @description Component for input timer length\n * \n * @param {Object.Function} props.onSubmit Function from App component to process initial value of the timer\n */\nfunction StartInput(props) {\n\n    const isInt = (value) => {\n        return !isNaN(value) && parseInt(value).toString() === value \n    }\n    // Function to validate input. Input only accepts numbers from 0 to 99.\n    const onChange = (e) => {\n        //Determine if input is an integer\n        if(isInt(e.target.value)){\n            e.target.value = e.target.value.slice(0,2)\n        } else {\n            if(!isNaN(parseInt(e.target.value)))\n            e.target.value = parseInt(e.target.value).toString().slice(0,2)\n            else\n            e.target.value = null\n        }\n    }\n    return(\n        <div className=\"input-form\">\n            <form onSubmit={props.onSubmit}>\n                <input className=\"input-box\" type=\"text\" onChange={onChange} name=\"startTime\" id=\"startTime\" placeholder=\"(Min)\"/>\n                <button className=\"submit-button\">Start</button>\n            </form>\n        </div>\n    )\n}\n\nexport default StartInput","import React from 'react';\n/**\n * @description Component for Pause and Resume button\n * \n * @param {Object.Boolean} props.isRunning Boolean to determine if the timer is running\n * @param {Object.Boolean} props.disableButton Boolean to determine if button is disabled\n * @param {Object.Function} props.togglePauseResume Function from App component to Pause or Resume timer\n */\nfunction ToggleControl(props) {\n    return(\n        <div className=\"pause\">\n            <button className={props.isRunning || props.disableButton ? \"pause-button\" : \"resume-button\"} disabled={props.disableButton} onClick={props.togglePauseResume}>{props.isRunning  || props.disableButton ?  \"Pause\" :   \"Resume\" }</button>\n        </div>\n    )\n}\n\nexport default ToggleControl","import React from 'react'\n/**\n * @description Component that contains three buttons that handles changing the speed of the timer.\n * \n * @param {Object.Boolean} props.disableButton The value is true when button is disabled\n * @param {Object.Number} props.selectedSpeed Contains the value of the current speed in milliseconds.\n * @param {Object.Function} props.speedChange Function from App component that handles changing the interval speed.                \n */\nfunction SpeedControl(props) {\n    return(\n        <div className=\"speed\">\n            <button disabled={props.disableButton} className={props.selectedSpeed === 1000 ? \"selected speed-button\" : \"speed-button\"} onClick={props.speedChange} value=\"1000\">1x</button>\n            <button disabled={props.disableButton} className={props.selectedSpeed === 666 ? \"selected speed-button\" : \"speed-button\"} onClick={props.speedChange} value=\"666\">1.5x</button>\n            <button disabled={props.disableButton} className={props.selectedSpeed === 500 ? \"selected speed-button\" : \"speed-button\"} onClick={props.speedChange} value=\"500\">2x</button>\n        </div>\n    )\n}\n\nexport default SpeedControl","import React from 'react';\nimport Message from './components/Message'\nimport StartInput from './components/StartInput'\nimport ToggleControl from './components/ToggleControl'\nimport SpeedControl from './components/SpeedControl'\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: 0,\n      minutes: 0,\n      seconds: 0,\n      initialValue: null,\n      isRunning: false,\n      togglePauseResumeDisabled: true,\n      speed: 1000\n    }\n  }\n  /**\n   * @description   Handles the update for the timer in every interval.\n   *                The interval speed is stored in state.speed\n   */\n  tick = () => {\n    //Check the timer if it has not reach 0 and if it is currently running\n    if(this.state.timer > 0 && this.state.isRunning) {\n      //Decrement the timer by 1 second and save new timer to the state\n      let newTime = this.state.timer - 1;\n      this.setState({\n        timer: newTime,\n        minutes: Math.floor(newTime / 60),\n        seconds: newTime % 60,\n      });\n      //Disable Pause button if timer reaches 0\n      if(this.state.timer === 0)\n      this.setState({\n        togglePauseResumeDisabled: true,\n        isRunning: false,\n      }, clearInterval(this.timerId));\n    }  \n  }\n\n  /**\n   * @description   Formats the timer for display\n   * @return        Timer in MM:SS format enclosed in a span tag\n   */\n  formatTime = (minutes, seconds) => {\n    if(minutes < 10)\n      minutes = \"0\" + minutes;\n    if(seconds < 10)\n      seconds = \"0\" + seconds;\n    return (<span>{minutes}:{seconds}</span>);\n  }\n\n  /**\n   * @description   Handles the event when input form is submitted.\n   * @param         {Object} e Event object from the StartInput component that contains the initial timer value in minutes.\n   */\n  onSubmit = (e) => {\n    //Prevents the page from refreshing.\n    e.preventDefault();\n    //Dont do anything if input is blank or zero\n    if(e.target.startTime.value === \"\" || e.target.startTime.value === \"0\")\n      return\n\n    //Clear interval if timer is currently running\n    if(this.state.isRunning) {\n      clearInterval(this.timerId);\n    }\n\n    //Get initial value from the form submitted and convert it to seconds\n    const minutesToSeconds = parseInt(e.target.startTime.value) * 60;\n\n    //Save initial value to state\n    this.setState({\n      timer: minutesToSeconds,\n      minutes: Math.floor(minutesToSeconds/60),\n      seconds: minutesToSeconds % 60,\n      initialValue: minutesToSeconds,\n      isRunning: true,\n      togglePauseResumeDisabled: false,\n      speed: 1000\n    });\n\n    //Start the timer with initial speed 1000ms\n    this.timerId = setInterval(\n      () => this.tick(), 1000\n    )\n  }\n\n  /**\n   * @description Method for Pause or Resume button is pressed.\n   */\n  onTogglePauseResume = () => {\n    let isRunning = this.state.isRunning;\n    //Check if timer is running\n    if(isRunning){\n      //Pause the timer\n      clearInterval(this.timerId);\n    } else {\n      //Resume the timer\n      this.timerId = setInterval(\n        () => this.tick(), this.state.speed\n      )\n    }\n    \n    //Toggle isRunning state\n    this.setState({\n      isRunning: !isRunning\n    });\n  }\n\n  /**\n   * @description   Method for changing the speed of the timer interval\n   * @param         {Object} e Event object from the buttons that contains the value for speed interval in milliseconds \n   */\n  speedChange = (e) => {\n    //Pause the timer before changing the speed\n    clearInterval(this.timerId);\n\n    //Save new speed to state\n    this.setState({speed: parseInt(e.target.value)});\n\n    //Resume the timer with the new speed interval\n    this.timerId = setInterval(() => this.tick(), e.target.value);\n  }\n\n  /**\n   * @description   Method to check when timer is less than 20 and less than 10 \n   * @return        CSS class name for styling the timer when it is 20 seconds and 10 seconds.    \n   *             \n   */\n  getTimerStyle = () => {\n    if(this.state.timer <= 20 && this.state.initialValue != null) {\n      if(this.state.timer <= 10 && this.state.initialValue != null )\n        return \"warning blink\"\n      return \"warning\"\n    }\n  }\n  render () {\n    return (\n      <div className=\"App\">\n        <StartInput onSubmit={this.onSubmit} />\n        <Message initialValue={this.state.initialValue} timer={this.state.timer} />\n        <div className=\"timer\">\n          <h1 className={this.getTimerStyle()}>{this.formatTime(this.state.minutes, this.state.seconds)}</h1>\n        </div>\n        <ToggleControl disableButton={this.state.togglePauseResumeDisabled} isRunning={this.state.isRunning} togglePauseResume={this.onTogglePauseResume} />\n        <SpeedControl disableButton={!this.state.isRunning} selectedSpeed={this.state.speed} speedChange={this.speedChange}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}